// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  username        String           @unique
  email           String           @unique
  password        String
  bio             String?
  followedBy      Follows[]        @relation("following")
  following       Follows[]        @relation("followedBy")
  recipes         Recipe[]
  recipeFavorites RecipeFavorite[]
  comments        Comment[]
  commentLikes    CommentLike[]
  pantryItems     PantryUsers[]
}

model Recipe {
  id          String              @id @default(uuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  favorites   RecipeFavorite[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now())
  servings    Int
  cookTime    Int
  ingredients RecipeIngredients[]
  description String
  directions  String
  tags        Tags[]
  comments    Comment[]
  image       String?
}

model IngredientMasterList {
  id                String              @id @default(uuid())
  name              String
  PantryItem        PantryItem[]
  RecipeIngredients RecipeIngredients[]
}

model PantryItem {
  id           String               @id @default(uuid())
  name         String
  ingredientId String
  ingredient   IngredientMasterList @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownedBy      PantryUsers[]
}

model PantryUsers {
  id           String     @id @default(uuid())
  userId       String
  pantryItemId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pantryItem   PantryItem @relation(fields: [pantryItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, pantryItemId])
}

model RecipeIngredients {
  recipeIngredientId String               @id @default(uuid())
  recipe             Recipe               @relation(fields: [recipeIngredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ingredientId       String
  ingredient         IngredientMasterList @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity           Int
  measurement        String
  preparationNotes   String
}

model Tags {
  id       String @id @default(uuid())
  name     String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Follows {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId  String
  recipe    Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes     CommentLike[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model RecipeFavorite {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model CommentLike {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}
