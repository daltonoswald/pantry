// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  name             String
  username         String           @unique
  email            String           @unique
  password         String
  bio              String?
  followed_by      Follows[]        @relation("following")
  following        Follows[]        @relation("followed_by")
  recipes          Recipe[]
  recipe_favorites RecipeFavorite[]
  comments         Comment[]
  comment_likes    CommentLike[]
  pantry           PantryItem[]
}

model PantryItem {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Follows {
  followed_by    User   @relation("followed_by", fields: [followed_by_id], references: [id])
  followed_by_id String
  following      User   @relation("following", fields: [following_id], references: [id])
  following_id   String

  @@id([following_id, followed_by_id])
}

model Recipe {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  favorites   RecipeFavorite[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now())
  comments    Comment[]
  servings    Int
  cook_time   Int
  description String
  ingredients Ingredients[]
  directions  String
  tags        Tags[]
  image       String?
}

model Ingredients {
  id          String @id @default(uuid())
  name        String
  quantity    Int
  measurement String
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Tags {
  id       String @id @default(uuid())
  name     String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id         String        @id @default(uuid())
  content    String
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId   String
  recipe     Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes      CommentLike[]
  created_at DateTime      @default(now())
  updated_at DateTime      @default(now())
}

model RecipeFavorite {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model CommentLike {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}
